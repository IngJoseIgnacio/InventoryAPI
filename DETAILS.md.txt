
## üìÑ DETAILS.md
```markdown:DETAILS.md
# Detalles de Dise√±o del Sistema de Inventario

## üéØ Decisiones de Dise√±o Clave

### 1. Arquitectura en Capas
**Decisi√≥n**: Separaci√≥n clara entre backend (API) y frontend (React)
**Justificaci√≥n**: 
- Mejor mantenibilidad y escalabilidad
- Equipos pueden trabajar de forma independiente
- F√°cil reemplazo de cualquiera de las capas

### 2. Base de Datos - SQL Server
**Decisi√≥n**: Usar SQL Server con Entity Framework Core
**Justificaci√≥n**:
- Soporte robusto para transacciones
- Madurez y estabilidad
- Integraci√≥n natural con el ecosistema .NET

### 3. Modelo de Datos
**Decisi√≥n**: Tabla √∫nica para entradas/salidas con flag `IsOutput`
**Ventajas**:
- Historial completo de movimientos
- F√°cil auditor√≠a y trazabilidad
- Implementaci√≥n simple de FIFO

### 4. Principio FIFO
**Implementaci√≥n**: Las salidas se registran contra las entradas m√°s antiguas
**Beneficios**:
- Gesti√≥n adecuada de productos perecederos
- Minimiza p√©rdidas por caducidad
- Cumple con normativas de industria alimentaria

### 5. Validaciones en Backend
**Decisi√≥n**: Validaciones tanto en cliente como servidor
**Raz√≥n**:
- Seguridad: el cliente puede ser bypassado
- Consistencia: datos v√°lidos en la base de datos
- Experiencia: feedback inmediato al usuario

## ‚ö° Desaf√≠os T√©cnicos Resueltos

### 1. Ciclos de Referencia JSON
**Problema**: Serializaci√≥n circular entre Product ‚Üî InventoryEntries
**Soluci√≥n**:
- DTOs espec√≠ficos para respuestas API
- Configuraci√≥n `ReferenceHandler.IgnoreCycles`
- Proyecci√≥n expl√≠cita en controladores

### 2. Gesti√≥n de Caducidades
**Implementaci√≥n**: C√°lculo en tiempo real del estado
**L√≥gica**:
- Vigente: > 3 d√≠as para caducar
- Por vencer: ‚â§ 3 d√≠as para caducar
- Vencido: fecha pasada

### 3. Control de Stock
**Mecanismo**: Validaci√≥n de existencias antes de salidas
**Ventaja**: Evita stock negativo y operaciones inv√°lidas

## üöÄ Sugerencias de Escalabilidad

### 1. Implementar Caching
- **Redis** para cache de productos y estados
- **React Query** en frontend para cache local
- **Reducir** carga en base de datos para consultas frecuentes

### 2. Mejorar Performance de Consultas
```csharp
// Ejemplo: √çndices para b√∫squedas por fecha
modelBuilder.Entity<InventoryEntry>()
    .HasIndex(e => e.ExpirationDate);

modelBuilder.Entity<InventoryEntry>()
    .HasIndex(e => new { e.IsOutput, e.ExpirationDate });